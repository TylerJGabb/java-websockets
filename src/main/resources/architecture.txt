Resolver:
    - A class capable of resolving raw binary data in a payload into a POJO equivalent
    - may not need this if guaranteed to be sending messages via json
    - cons: maintaining a collection/mapping of operations and may eventually lead to excessive switch-case
        - how to solve switch-case? the incoming message flow would be as follows
        
            bytes -> resolver (extracts message type T) -> generic json parser <T>(remainingpayload) -> TImpl -> ListenerCaller -> ...
            
            - we could maintain a map of byte -> Class<? extends Message> or someting like this... Message could be an abstract
            that will lay some groundrules for what each message must contain...
            
            - not sure I 100% like the idea, but the resolver could hold this map
            problem with this is that I need to maintain this on both embedded and server side
            **** !!!! maybe I could use hash code!
            NO! can't do that, hash codes change from one runtime to another
            
Resolver Strategy:
    - A class that the Resolver uses to resolve a payload. Can be passed in externally
    to allow more abstraction 
            
KeepAlive:
    - A class responsible for managing/observing the quality of a socket connection
    - Currently implemented in a way that just pings regularly and checks when the last pong was recieved
    - Might be able to send a ping and block while waiting for pong, and can use timeout. but this opens the door
    to the possibility of a rogue pong, so this is why we would send with a random hash into the ping, since the
    protocol states that a ping's payload must be send back in a pong. So if we send AFF15F5E then we must recieve AFF15F5E
    this could be used to ignore rogue pongs... I like this idea a bit better. We could use semaphore...
    
    - I like the idea of events here, where if something abnormal happens a list of listeners are invoked, (to block or not to block?)
    this removes the responsibility of handling abnormal events from this class, and allows it to be passed to someone else!
    
    
IListener:
    - A class that holds a type, indicating which kinds of POJO's it is able to process. Defines some code 
    on how to process that payload. Uses reflection to infer the runtime type of the generic
    
IPayloadBroker (RENAME consumer/router/listenerdelegator:
    - Holds a list of Listeners, and when it recieves a IPayload, distributes that to the listeners registered to be able
    to process IPayload runtime instance, Responsibility of further processing the Message is handed to the Listener's process method
    
PayloadPacker:
    - Given an instance of IPayload, uses typecode map to infer its typecode and builds a Buffer
    - uses a packing strategy, and will add the code of the packing strategy into the buffer

PackingStrategy
    - Given an IPayload, allows customizable way to turn it into a stream of bytes


!!! Need a way to have a class that is the base for all payloads, that contains the common logic
to extract the typecode for the class and packing strategy...


Consider renaming:

IResolver -> IDeSerializer
IResolvingStrategy -> IDeSerializingStrategy
IPayloadBacker -> ISerializer
IPayloadPackingStrategy -> ISerializationStrategy

Could possibly group these together in a parent...

ISerializer contains ISerializationStrategy
ISerializationStratrgy contains instructions for Serializing an IPayload into byte[], and
    deserializing a byte[] into an IPayload... 

    
    
    
ServerSide vs ClientSide

Server:
    So the server will contain a resolver and be waiting for frames, and be ready to invoke any listener
    for the payload contained in the frame..
    
    The server should not try to resolve any pong frames
    
    For each websocker connection, a keepalive will monitor the connection for any anomalies
    and attempt to keep the connection alive as long as its feasible and no errors have occurred...
    
    
Client:
    on Client Side, take a look at Client.java.
    I like the implementation of it, and how it continuously tries
    to keep a viable connection. 
    
    Something like that really isn't necessary on serverside, 
    because the client requests to connect, the server is just
    keeping an eye on the quality of the connection. 
    
    IKeepAlive still has to be re-implemented though.


=   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =
Something I found out about WebSocket
if you add a pong handler, and send a ping, then when the pong is sent back
the pong handler is invoked AND an empty buffer passes through the handler.
If you remove the pong handler, it no longer happens.

You're going a little too hard into vertx and not really thinking about
what you need.

You could have a client server model, where the server will maintaina list of
active websocket connections to clients, maintain and monitor those connections,
attempt to re-establish them if they go down, or just terminate them

I think it should be the client's responsibility to attempt to reconnect if the connection
has been closed, that way, the server can just let go without worrying if it had
done enough to maintain the connection, the client will just attempt to re-connect.
if its never able to do so, then it's not a viable client.

We could have another type of model, where the clients are all self sufficient,
periodically polling for work when they are not busy, like sending a
GET request to get the next bit of work to be done. But then we would have to
periodically check if the current work has been cancelled...

I think the client server modelis best

server maintains a list of clients, those clients will attempt to restore lost connection
to the server. The server can kick them out.

Still not clear on who should maintain the connection quality? It was my original
idea that the server would monitor the quality, and that if it dropped below
some threshold that the client's connection would be closed...

The server is the source of truth, it knows what work needs to be done
and knows which of the connected clients are capable of carrying out
said work. It can delegate that work via instructions sent as messages through the connection

There's still some more work to be done with error handling when resolving buffers into messages, thrown exceptions
aren't ever handled because of how anonymized everything is in the vertx framework, explicit exceptions need to be caught
and logged at some high level to be able to see whats going wrong.

A note on server side KeepAlive, this class is just responsible for pinging and handling pongs.
its primarily checking how long its taking to receive a pong, this only checks latency.

Resolving messages and dispatching them may need to be made asynchronous or a add a message queue...
now I'm beginning to think we could use 0MQ or RMQ but i still don't know what those are... after some quick reading
ZMQ attempts to solve the problem by working inside of a middle ground between raw TCP/UDP and Sockets
To use ZMQ seems like theres a lot of boilerplate code I'd need to write, and they mention that
its difficult to implement connection recovery, where I found it fairly simple with Vertx.

Did a few tests of my own, bombarded the server with messages and faked a 1sec block, the server could not
keep up, no telling what would happen if whatever internal queue was surpassed, messages would probably
just be dropped.. suck not having internet and being able to open the documentation....

My proposed solution is to introduce a queue and add to it when the buffer is recieved, the buffer itself would be
added to the queue, several consumers could then consume the queue...

I feel so dumb for not thinking of the pubsub nomenclature before, changed dispatcher/processor to pub/sub method
also removed really messy type erasure token thing, and used more generics to enfore T to match Class<T>
passed into constructor of AbstractMessageSubscriber to that compiler will catch mismatch.


-   -   -   -   -   -   -   -   -   -   -   -
see https://softwareengineering.stackexchange.com/questions/406117/how-do-you-resolve-a-byte-into-a-class-instance-in-a-way-that-doesnt-couple-t?noredirect=1#comment895254_406117
I'm going to try and take a schema-oriented approach, without dependencies on POJOs or types, I'll just parse json that
has been validated against a schema.

https://json-schema.org/
https://www.geeksforgeeks.org/parse-json-java/


-   -   -   -   -   -   -   -   -   -   -   -   -
The KeepAliveClient is active on TestRunner side and can receive and send messages through dedicated socket

fFr now, use singleton main event bus on server side for use with all events that need access to ORM and file system and other things

Messages arrive to the ServerTestRunner, are processed lightly, and then submitted to main event bus for more expensive operation

-   -   -   -   -   -   -   -   -   -   -   -   -   -   -       
Under what circumstances is the database changed?

We have a tree like structure

Test Plan 1---->* Job 1---->* Run

*** When a user stops an entire test plan, the test plan status is marked, and all incoming
RunFinished events must be ignored for any jobs belonging to that test plan

*** When a TestRunner finishes a run, the job  needs to be updated. 
If the pass count > desired pass, or fail count > allowed failures, then the
job status must be changed accordingly, and all resources free'd
for that job. 

*** When a run is started, a run is added for the job, and its status marked
accordingly. The same run could not possibly come back while performing
this update, but another run for the same job could come back
that renders this job obsolete.

*** When a run is stopped, this could happen if either the user stopped a test plan
or if the TRM is freeing a resource

BEFORE PROCESS
A) Test Plan Stopped
    1) free all resources in use and stop them
    2) set run statuses to terminated

In terms of priority, I think what follows is best

1) RunFinishedEvent:
	a) check parent job terminated
	b) check failure type
	c) set run status
	d) job status updated
		i) if job terminated, send stop signals to runners
		ii) set run status of terminated runs to TERMINATED
		
2) RunStartedEvent
	a) check parent job terminated
	b) set test runner
	c) set run status

---
AFTER PROCESS
C) Update Test Plan Status
D) Allocation
















    

            
        