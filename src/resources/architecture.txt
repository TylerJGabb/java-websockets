Resolver:
    - A class capable of resolving raw binary data in a payload into a POJO equivalent
    - may not need this if guaranteed to be sending messages via json
    - cons: maintaining a collection/mapping of operations and may eventually lead to excessive switch-case
        - how to solve switch-case? the incoming message flow would be as follows
        
            bytes -> resolver (extracts message type T) -> generic json parser <T>(remainingpayload) -> TImpl -> ListenerCaller -> ...
            
            - we could maintain a map of byte -> Class<? extends Message> or someting like this... Message could be an abstract
            that will lay some groundrules for what each message must contain...
            
            - not sure I 100% like the idea, but the resolver could hold this map
            problem with this is that I need to maintain this on both embedded and server side
            **** !!!! maybe I could use hash code!
            NO! can't do that, hash codes change from one runtime to another
            
Resolver Strategy:
    - A class that the Resolver uses to resolve a payload. Can be passed in externally
    to allow more abstraction 
            
KeepAlive:
    - A class responsible for managing/observing the quality of a socket connection
    - Currently implemented in a way that just pings regularly and checks when the last pong was recieved
    - Might be able to send a ping and block while waiting for pong, and can use timeout. but this opens the door
    to the possibility of a rogue pong, so this is why we would send with a random hash into the ping, since the
    protocol states that a ping's payload must be send back in a pong. So if we send AFF15F5E then we must recieve AFF15F5E
    this could be used to ignore rogue pongs... I like this idea a bit better. We could use semaphore...
    
    - I like the idea of events here, where if something abnormal happens a list of listeners are invoked, (to block or not to block?)
    this removes the responsibility of handling abnormal events from this class, and allows it to be passed to someone else!
    
    
IListener:
    - A class that holds a type, indicating which kinds of POJO's it is able to process. Defines some code 
    on how to consume that payload. Uses reflection to infer the runtime type of the generic
    
IPayloadBroker (RENAME consumer/router/listenerdelegator:
    - Holds a list of Listeners, and when it recieves a IPayload, distributes that to the listeners registered to be able
    to process IPayload runtime instance, Responsibility of further processing the Message is handed to the Listener's consume method
    
PayloadPacker:
    - Given an instance of IPayload, uses typecode map to infer its typecode and builds a Buffer
    - uses a packing strategy, and will add the code of the packing strategy into the buffer

PackingStrategy
    - Given an IPayload, allows customizable way to turn it into a stream of bytes


!!! Need a way to have a class that is the base for all payloads, that contains the common logic
to extract the typecode for the class and packing strategy...


Consider renaming:

IResolver -> IDeSerializer
IResolvingStrategy -> IDeSerializingStrategy
IPayloadBacker -> ISerializer
IPayloadPackingStrategy -> ISerializationStrategy

Could possibly group these together in a parent...

ISerializer contains ISerializationStrategy
ISerializationStratrgy contains instructions for Serializing an IPayload into byte[], and
    deserializing a byte[] into an IPayload... 

    
    
    
ServerSide vs ClientSide


    

            
        